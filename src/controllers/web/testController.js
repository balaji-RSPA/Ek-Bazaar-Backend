const moment = require('moment')
const Papa = require('papaparse')
const path = require("path");
const fs = require('fs').promises
const {
    getAllPrimaryCategory,
    updatePrimaryCategory,
    getSecondaryCategoryByName,
    updateSecondaryCategory
} = require('../../modules/categoryModule')
const {
    respSuccess,
    respError
} = require('../../utils/respHadler');
const axios = require('axios')

const { getMasterRecords, updateMasterBulkProducts, updateMaster, getMaster, bulkDeleteMasterProducts } = require('../../modules/masterModule')

const { getSellerPlan, deleteSellerPlans } = require('../../modules/sellerPlanModule')
const { getUserList, deleteBuyer, deleteUser, deleteBuyers } = require('../../modules/buyersModule')
const { searchProducts, deleteSellerProducts } = require('../../modules/sellerProductModule')
const { getAllSellerData, deleteSellerRecord, getSeller, getSellersListData } = require('../../modules/sellersModule');
const { getCountryData, addCity, getCity, getCityList } = require('../../modules/locationsModule')
const { deleteChatAccount, userLogin, userChatLogin } = require('./rocketChatController')
const { rocketChatAdminLogin } = require('../../utils/globalConstants')
const SellerSchema = require('../../models/sellersSchema')
const _ = require('lodash')
const admin = {
    username: rocketChatAdminLogin.username,
    password: rocketChatAdminLogin.password
}

module.exports.updateLevel2l1Data = async (req, res) => {

    try {
        const result = await getAllPrimaryCategory('', 0, 1000)
        console.log(result, result.length, 'testing')
        for (let index = 0; index < result.length; index++) {
            const element = result[index];
            const updateData = {
                l1: element.parentCatId.vendorId
            }
            const updateResult = await updatePrimaryCategory(element._id, updateData)
            console.log(index, "  updateData", updateResult)

        }
        console.log('Completed++++++++++++')
        respSuccess(res, 'updated successfully')

    } catch (error) {

        console.log(error)
        respError(error)

    }

}

module.exports.updateLevel3l1Data = async (req, res) => {

    try {
        const result = await getSecondaryCategoryByName({ l1: "true" })
        console.log(result, result.length, 'testing')
        for (let index = 0; index < result.length; index++) {
            const element = result[index];
            const updateData = {
                l1: element.primaryCatId.l1
            }
            console.log(element._id, ' ---- id')
            const updateResult = await updateSecondaryCategory(element._id, updateData)
            console.log(index, "  updateData", updateResult)

        }
        console.log('Completed++++++++++++')
        // respSuccess(res, 'updated successfully')

    } catch (error) {

        console.log(error)
        respError(error)

    }

}

module.exports.updatePriority = async (req, res) => new Promise(async (resolve, reject) => {

    try {


        const result = await getMasterRecords({ flag: 1 }, { skip: 0, limit: 1000 })
        // console.log(JSON.stringify(result[0].sellerId._id), 'update preiority')
        let updateIds = []
        if (result.length) {
            for (let index = 0; index < result.length; index++) {
                let priority = 0
                const element = result[index];
                if (!element.userId) {
                    // console.log('4-------------')
                    priority = 4
                } else if (element.sellerId._id && element.sellerId._id.planId) {
                    // console.log('3-------------')
                    const plan = await getSellerPlan({ _id: element.sellerId._id.planId })
                    if (plan) {
                        const currentDate = moment().format('YYYY-MM-DD')
                        const expireDate = moment(plan.exprireDate).format('YYYY-MM-DD')
                        // console.log(moment(currentDate).isSameOrAfter(expireDate), ' ggggggggggggggg')

                        if (plan.isTrial) {
                            priority = 2
                        } else if (moment(currentDate).isSameOrAfter(expireDate)) {
                            priority = 3
                        } else if (!moment(currentDate).isSameOrAfter(expireDate)) {
                            priority = 1
                        }
                    } else {
                        priority = 4
                    }

                } else {
                    priority = 4
                }
                const updateData = {
                    priority
                }
                updateIds.push(element._id)
                await updateMaster({ _id: element._id }, updateData)
            }
            console.log(updateIds, ' Updated ids result-----------')
            await updateMasterBulkProducts({ _id: { $in: updateIds } }, { flag: 2 })
            console.log(' -------- Proprity Mapping COmpletes --------------')
        } else {
            console.log('----------------- NO master records -------------')
        }
        resolve()
    } catch (error) {
        console.log(error)

        reject(error)
    }

})

module.exports.deleteTestData = async (req, res) => new Promise(async (resolve, reject) => {
    try {

        console.log(admin, 'test data delete-----------------')
        // const result = await getUserList({ /* _id: "60696bce36878670aa4863eb"  *//* name: "test" */  $where: "/^1.*/.test(this.mobile)" }, 1000)
        const mon = [
            9377531777,
            8654123789,
            6546546546,
            0000000000,
            7633940634,
            4666666666,
            4547768676,
            9785767654,
            8870790799,
            7876545747,
            5656564444,
            9877343242,
            7676768769,
            9743685882,
            9691606259,
            9797094927,
            7796687567,
            9099265054,
            4498154915,
            6000000001,
            4687897984,
            9476287982,
            9817617378,
            9761999916,
            9997306309,
            9864534547,
            7895489457,
            8998988909,
            8946846546,
            6547657568,
            7643584376,
            5465465745,
            4576576586,
            7249842876,
            1122334455,
            2398723028,
            9845651007,
            8277759312,
            9876543213,
            8277759315,
            4565621231,
            8277759314,
            4564515410,
            8312342131,
            9442627648,
            8723648723,
            8652321321,
            5645645064,
            9533320452,
            8091259337,
            7852369411,
            8765655454,
            4564646546,
            9999555555,
            9345620764,
            9905471208,
            9665766747,
            8989376376,
            8776785876,
            5555555555,
            1122555446,
            7898785876,
            7847886005,
            8888855555,
            5443523423,
            9889666534,
            6756454556,
            9500183467,
            6567455665,
            4676687877,
            6564564757,
            8888688886,
            9686865157,
            9738554506,
            1654564564,
            6873256757,
            6754656533,
            8610796380,
            7897894545,
            5456765756,
            5675674567,
            8885552226,
            9686865157,
            4768425475,
            7675645353,
            8277759300,
            9883377223,
            5478657467,
            7657687857,
            9035594482,
            9486951440,
            8765657465,
            2635273571,
            9686523659,
            7879798797,
            7975406493,
            9533329087,
            6309481972,
            7887967856,
            8798787956,
            2323232323,
            6786788769,
            9576568976,
            9488774951,
            9443560254,
            9842231522,
            9442664707,
            9159242224,
            9443379589,
            9442607366,
            9442571455,
            9843023233,
            9586670953,
            9786676801,
            9750772900,
            9747878200,
            4232284250,
            9442791199,
            9787442424,
            9840489996,
            7667067374,
            9442693095,
            9442552707,
            9442134134,
            9486626516,
            4262261255,
            9486176134,
            9486188877,
            9443102212,
            6325148697,
            9443061322,
            9442791212,
            4266270936,
            9446033986,
            4232284139,
            4266271457,
            9442314444,
            4232284892,
            9443585448,
            9442251218,
            4262206294,
            9487966113,
            9842271190,
            7698070987,
            9442170881,
            9442622810,
            9443059299,
            9442171439,
            9943089680,
            9842720840,
            9894340458,
            6699669966,
            9487531481,
            9988442314,
            9442271456,
            9843039467,
            9842258627,
            9442368750,
            7358965563,
            9486586546,
            9159500880,
            9443031373,
            9443129785,
            9447775502,
            9843030563,
            9443039491,
            9486023744,
            9446422874,
            9486394641,
            9443046111,
            9495144492,
            9443523261,
            4232258706,
            9443061444,
            9443031246,
            9486188709,
            8903911355,
            9486671117,
            4232230419,
            9744991213,
            9443360517,
            4266279877,
            9443560501,
            9442084006,
            9447749994,
            9568094740,
            9443367452,
            9843433056,
            4232231190,
            9443522141,
            4262220055,
            9445062055,
            9884407077,
            9486861266,
            9442621860,
            9443375713,
            9626106660,
            9443330739,
            9487790964,
            4232284114,
            9500799999,
            9843464188,
            9443208225,
            9443032046,
            9443069088,
            9443524140,
            9751015556,
            9443031275,
            9344703439,
            9159811522,
            4266271829,
            9443022259,
            4266276656,
            9442790877,
            9566000226,
            8988968757,
            9523964558,
            9565786586,
            8465210485,
            4852145125,
            7845478521,
            4521045623,
            8745127845,
            7870870970,
            6578978798,
            9880559139,
            9328664900,
            9686098203,
            9443532768,
            9286509902,
            7676461486,
            4452369887,
            9876543211,
            8678687689,
            5678687785,
            4745743674,
            7644765746,
            4222223942,
            4746478678,
            4253221026,
            7483687486,
            8784758748,
            8487576646,
            9869071684,
            9163209070,
            9902775740,
            9805509269,
            9163565901,
            7582446398,
            9978605440,
            8160488534,
            9825150569,
            9913545584,
            7096103926,
            8460075253,
            9979869331,
            9967356190,
            8000010700,
            9913257501,
            8652147896,
            6452052055,
            9568234455,
            9825070953,
            9586313776,
            9686301001,
            4735747375,
            9428759570,
            9924142857,
            9898573760,
            9664928132,
            9427488861,
            7738566768,
            9825607618,
            8000454577,
            2353454345,
            4454487878,
            9483632704,
            9198244851,
            9328941044,
            9252613331,
            7347265867,
            9725462444,
            9377775560,
            8048762026,
            9640681047,
            0804532726,
            6767675654,
            4455653453,
            3254365457,
            3454535353,
            4565768768,
            6000000456,
            9825618280,
            8870539776,
            9980966929,
            9008893627,
            9008893627,
            9008893627,
            4575879789,
            9375690002,
            7546465364,
            7527825885,
            9900102701,
            9743332477,
            7567914441,
            8277759313,
            8437983740,
            8919918505,
            9379563852,
            9033234406,
            9391027776,
            9924539883,
            5623426758,
            7984789444,
            9824246488,
            9898549306,
            9945093890,
            9033263061,
            9898036799,
            9925915870,
            8147207720,
            9539759370,
            8105406822,
            5675755675,
            5345353543,
            9916825719,
            9916820705,
            9916825803,
            9916825804,
            8754512415,
            9916825805,
            9916825806,
            9916825807,
            9874563214,
            9426010352,
            5455454548,
            2758588338,
            987654321,
            8123928832,
            4895745675,
            9865432156,
            9822968560,
            9376945281,
            9825222974,
            9727764162,
            9844214809,
            1234567000,
            4576654765,
            6353490407,
            7204644670,
            8597687878,
            5678975479,
            9533320451,
            9825017683,
            5487686586,
            9879457348,
            9015654810,
            9986116064,
            9099943748,
            7259842876,
            9008988972,
            9886253247,
            9886253247,
            1999999999,
            9824111711,
            9886263247,
            9876263247,
            9745632145,
            9896263247,
            9806526604,
            8980134919,
            9898021557,
            7984364706,
            9925390085,
            9974046274,
            7984964206,
            9925010205,
            9727617201,
            8660759817,
            9686301013,
            8511964939,
            9876541323,
            9982475566,
            9016876311,
            9016876311,
            9008988972,
            9876543690,
            9551009510,
            9945618246,
            9945612645,
            8505492565,
            9377750505,
            9033465616,
            2356895632,
            9008312615,
            9985488594,
            8618790263,
            8770041250,
            8895544650,
            9875641236,
            9014571186,
            8894554656,
            5464646464,
            8268736286,
            9632587412,
            9856565562,
            9998973304,
            8978575222,
            9743277007,
            7028913593,
            9979727410,
            9426074833,
            9375555456,
            9974697906,
            9925211307,
            9909652024,
            9726230628,
            8248148427,
            9687744545,
            9164449169,
            9916542164,
            9909146777,
            8980181614,
            8499998866,
            8762834323,
            7259842876,
            9695944893,
            9825372977,
            9027332421,
            6364510371,
            8499998866,
            7567832899,
            8277759000,
            9722975964,
            9676263289,
            9886253247,
            9374711585,
            5563856695,
            8925456818,
            9336628793,
            9008988972,
            9825817785
        ]
        const emails = [
            "sriraman1807@gmail.com",
            "anupureddy1234@gmail.com",
            "rakshisowmya@gmail.com",
            "sriraman@gmail.com",
            "sowmyat.swam@gmail.com",
            "sriraman1807@gmail.com",
            "ashu@gmail.com",
            "darsh@co.io",
            "darshan@co.io"
        ]
        // const result = await getUserList({ email: { $in: emails } })
        // console.log("🚀 ~ file: testController.js ~ line 135 ~ module.exports.deleteTestData ~ result", result.length)
        // const userIds = []
        // const sellerIds = []
        // if (result && result.length) {
        //     for (let index = 0; index < result.length; index++) {
        //         const user = result[index];
        //         // const chatLog = await userChatLogin({ userId: "60023283293d9c7dacb6d705", username: admin.username, password: admin.password })
        //         // const chatDetails = {
        //         //     mobile: user.mobile || '',
        //         //     token: chatLog.authToken,
        //         //     userId: chatLog.userId

        //         // }
        //         // const chatDelete = await deleteChatAccount(chatDetails)
        //         // console.log(chatDelete, ' -------chat delete --------------')
        //         const userId = user._id
        //         userIds.push(user._id)
        //         const sellers = await getAllSellerData({ /* userId */ 'mobile.mobile': { $in: [user.mobile.toString()] }, userId: { $ne: null } }, { skip: 0, limit: 20 })
        //         console.log("🚀 ~ seller lenth", sellers && sellers.length)
        //         if (sellers && sellers.length) {
        //             for (let index = 0; index < sellers.length; index++) {
        //                 const _seller = sellers[index];
        //                 const sellerId = _seller._id
        //                 sellerIds.push(sellerId)
        //                 const productids = _seller.sellerProductId
        //                 console.log("-- Product ids ", productids)
        //                 const m_dele = await bulkDeleteMasterProducts({ _id: { $in: productids } })
        //                 console.log('-------- delete master---------')
        //                 const p_dele = await deleteSellerProducts({ _id: { $in: productids } })
        //                 console.log('-------- delete  Seller Products---------')

        //                 const delMaster1 = await deleteSellerPlans({ sellerId: sellerId });
        //                 console.log('-------- delete  Seller Plan---------')
        //                 const _sellerDel = await deleteSellerRecord({ userId: userId });
        //                 console.log('-------- delete  Seller Data---------')
        //                 const _buyer = await deleteBuyer({ userId: userId })
        //                 console.log('-------- delete  Buyer Data---------')
        //             }
        //         }

        //         const investmentUrl = `http://localhost:8050/api/deleteInvesterDetails/${userId}`

        //         // delete from investment
        //         const respRes = await axios.post(investmentUrl, {
        //             headers: {
        //                 'Content-Type': 'application/json',
        //                 // 'authorization': `ekbazaar|${token}`,
        //             },
        //             data: {
        //                 userId
        //             }
        //         });
        //         console.log(respRes.data, ' onvestor deleted @@@@@@@@@ -------------')
        //     }
        //     const del = await deleteUser({ _id: { $in: userIds } })
        //     console.log('------- User Ids Deleted -----------')
        //     console.log(sellerIds, userIds, ' -------- deletion comnpletes-------')
        //     respSuccess(res, result)
        // } else {
        //     respError(res, "No user list")
        // }


    } catch (error) {
        console.log(error, ' jjjjjjjjjjjjjjjjjjjjj')
    }
})

module.exports.deleteTestDataRemaining = async (req, res) => new Promise(async (resolve, reject) => {

    try {
        console.log(' delete remaining test accounts ------------------')
        const mob = ["484849494",
            "803742973",
            "804304207",
            "804304909",
            "804531504",
            "804602872",
            "804607918",
            "804700593",
            "804700671",
            "804800877",
            "804801945",
            "804802518",
            "804802654",
            "804808652",
            "804841126",
            "804842794",
            "804842973",
            "804861008",
            "804871881",
            "804871926",
            "804871938",
            "804876202",
            "804888419",
            "1111122222",
            "1232004950",
            "1234554321",
            "1234567891",
            "1234568555",
            "1254542132",
            "1447852679",
            "2222222222",
            "2315646867",
            "2345678218",
            "2347623746",
            "2356489789",
            "2435478609",
            "2436734755",
            "2525252525",
            "2525252555",
            "2580258025",
            "2851428958",
            "3256895632",
            "3339800000",
            "3377567574",
            "3434232333",
            "3453453535",
            "3528444555",
            "3535333356",
            "3585222222",
            "3636352222",
            "3636363636",
            "3646447578",
            "3666733333",
            "3748888888",
            "3763633344",
            "3777777777",
            "3854444446",
            "3966666666",
            "4040404040",
            "4356544444",
            "4358965688",
            "4362452452",
            "4444444468",
            "4444444666",
            "4444455555",
            "4465577777",
            "4545454545",
            "4545858555",
            "4555555555",
            "4557574555",
            "4564646365",
            "4566544566",
            "4567894567",
            "4583111111",
            "4633333333",
            "4635633666",
            "4654654646",
            "4675355555",
            "4747755444",
            "4758444444",
            "4777746666",
            "4777777746",
            "4777777777",
            "4777777790",
            "4777855555",
            "4778888888",
            "4846666666",
            "4849999999",
            "4875834685",
            "4888888888",
            "5143564151",
            "5374545555",
            "5445444444",
            "5454787845",
            "5465646546",
            "5467897890",
            "5473477666",
            "5487488888",
            "5548734754",
            "5558555522",
            "5558777777",
            "5646465444",
            "5646546546",
            "5653566666",
            "5677564332",
            "5688888888",
            "5738544444",
            "5745555555",
            "5756858686",
            "5778888888",
            "5785874547",
            "5788888888",
            "5827282002",
            "5846484884",
            "5855555555",
            "5858585858",
            "5868666666",
            "5878797679",
            "5888888877",
            "5888888884",
            "5888888888",
            "5888999999",
            "6207842052",
            "6262772727",
            "6269963665",
            "6350194095",
            "6353333333",
            "6353443574",
            "6354284541",
            "6354564832",
            "6361607878",
            "6363346869",
            "6364805440",
            "6369746401",
            "6371074462",
            "6373633333",
            "6374236386",
            "6374730638",
            "6379008335",
            "6379476360",
            "6379520013",
            "6379869074",
            "6379895005",
            "6380185258",
            "6380418370",
            "6380696998",
            "6380799155",
            "6381213779",
            "6381305546",
            "6381496846",
            "6381887164",
            "6382352605",
            "6382498214",
            "6382925404",
            "6383049206",
            "6383090748",
            "6383218827",
            "6384736464",
            "6385224841",
            "6385610960",
            "6385664275",
            "6385764571",
            "6385861238",
            "6392405714",
            "6393390919",
            "6394850078",
            "6396665237",
            "6397411463",
            "6398359646",
            "6398415631",
            "6398915172",
            "6434444444",
            "6447466777",
            "6456346154",
            "6464347555",
            "6464534344",
            "6466666666",
            "6472777477",
            "6539999987",
            "6545465646",
            "6546465465",
            "6546554144",
            "6576896784",
            "6578941256",
            "6633333333",
            "6669655555",
            "6777777777",
            "6888888888",
            "6999999999",
            "7000948443",
            "7003649149",
            "7009080284",
            "7009987817",
            "7010513190",
            "7010611826",
            "7010640030",
            "7010653077",
            "7017070788",
            "7017622581",
            "7028881266",
            "7037156979",
            "7037213680",
            "7037418395",
            "7037497221",
            "7038983288",
            "7039239126",
            "7046053543",
            "7054861475",
            "7055395354",
            "7055555803",
            "7056007094",
            "7060735331",
            "7062940111",
            "7064582309",
            "7078063292",
            "7080201997",
            "7088545922",
            "7089197008",
            "7092451835",
            "7094182337",
            "7094275832",
            "7094508152",
            "7130438015",
            "7203032466",
            "7204073001",
            "7248693827",
            "7248782998",
            "7248808219",
            "7263031580",
            "7289810977",
            "7300089190",
            "7300963043",
            "7302244724",
            "7302412493",
            "7305585489",
            "7305613968",
            "7305723358",
            "7307951330",
            "7309823704",
            "7310824730",
            "7310917621",
            "7310942599",
            "7324545555",
            "7338999128",
            "7339232583",
            "7339559831",
            "7344444333",
            "7351222297",
            "7358167580",
            "7358365534",
            "7358371493",
            "7383920064",
            "7397228919",
            "7397517788",
            "7397556303",
            "7397692075",
            "7406528454",
            "7411514692",
            "7415515503",
            "7428723247",
            "7428730930",
            "7428801230",
            "7440568429",
            "7444444444",
            "7444444466",
            "7447388888",
            "7449663363",
            "7454097889",
            "7455993124",
            "7456084034",
            "7457013281",
            "7457854745",
            "7464835383",
            "7464865849",
            "7466027937",
            "7474343424",
            "7474446666",
            "7474766333",
            "7477777777",
            "7484777777",
            "7485444444",
            "7488888888",
            "7488899999",
            "7489099999",
            "7498935969",
            "7500741602",
            "7502510506",
            "7509777739",
            "7510069343",
            "7528988312",
            "7533333333",
            "7534874042",
            "7534965602",
            "7535951456",
            "7538856021",
            "7548555555",
            "7548892841",
            "7550259571",
            "7553333333",
            "7555093974",
            "7555251306",
            "7555264624",
            "7555348888",
            "7555555544",
            "7555555888",
            "7555661749",
            "7567280360",
            "7575466657",
            "7579469109",
            "7583781888",
            "7588884333",
            "7588888777",
            "7588888888",
            "7588888899",
            "7593930176",
            "7597641520",
            "7604815901",
            "7639171250",
            "7639247708",
            "7639614073",
            "7639907529",
            "7649333333",
            "7668024232",
            "7668819913",
            "7668980534",
            "7676346546",
            "7678515543",
            "7695890360",
            "7707097331",
            "7708919827",
            "7737756404",
            "7737779841",
            "7747666666",
            "7778876921",
            "7806872261",
            "7817930793",
            "7818022504",
            "7818041749",
            "7824906605",
            "7826846426",
            "7830917278",
            "7837757077",
            "7838979736",
            "7845002311",
            "7854844445",
            "7855555555",
            "7856587777",
            "7868814234",
            "7871608124",
            "7871678410",
            "7871709170",
            "7876368136",
            "7887390899",
            "7888888666",
            "7888888888",
            "7893086286",
            "7895020344",
            "7895655958",
            "7895675513",
            "7897897895",
            "7897897979",
            "7900717329",
            "7900867105",
            "7904150149",
            "7906356959",
            "7906539768",
            "7906566630",
            "7907024913",
            "7925724305",
            "7975382356",
            "7976184739",
            "7982115536",
            "7983116453",
            "7983188712",
            "7983824809",
            "7984111959",
            "7986068701",
            "7986900059",
            "7988092213",
            "7994646464",
            "7996072605",
            "7997488494",
            "7999734296",
            "8006002915",
            "8007752015",
            "8009081530",
            "8015652344",
            "8052344912",
            "8055777404",
            "8056299848",
            "8056740714",
            "8056791172",
            "8057922599",
            "8072312495",
            "8072897928",
            "8072947408",
            "8076629175",
            "8077193890",
            "8077249314",
            "8077353422",
            "8077506716",
            "8088306090",
            "8088909563",
            "8088909568",
            "8095015383",
            "8107054202",
            "8110952214",
            "8122337852",
            "8122617228",
            "8124034174",
            "8124894109",
            "8126709168",
            "8126875250",
            "8128122394",
            "8128333784",
            "8146151651",
            "8155503855",
            "8171673053",
            "8192996219",
            "8200186933",
            "8200521141",
            "8218132330",
            "8218268717",
            "8219590933",
            "8220932951",
            "8223061123",
            "8258888888",
            "8264173324",
            "8267811202",
            "8270764747",
            "8279943138",
            "8287965188",
            "8291165886",
            "8291415519",
            "8292345629",
            "8310355098",
            "8318752364",
            "8319761973",
            "8319918110",
            "8347213529",
            "8352444444",
            "8368453422",
            "8374387573",
            "8393066407",
            "8394055011",
            "8394534756",
            "8394815496",
            "8401207545",
            "8423239389",
            "8427218633",
            "8428314446",
            "8433011405",
            "8433492960",
            "8444333333",
            "8445600787",
            "8445935942",
            "8449343070",
            "8451042009",
            "8454444444",
            "8454444474",
            "8455555555",
            "8464644994",
            "8464646949",
            "8464648484",
            "8465555555",
            "8469560039",
            "8475094528",
            "8475875925",
            "8488888888",
            "8489095696",
            "8489633786",
            "8512073615",
            "8524045274",
            "8524046451",
            "8527341927",
            "8527375786",
            "8533013539",
            "8533833714",
            "8535076184",
            "8541245369",
            "8544725200",
            "8548538744",
            "8555246716",
            "8555555555",
            "8555555577",
            "8555578888",
            "8555593571",
            "8555963148",
            "8558888888",
            "8575455555",
            "8578655555",
            "8587454444",
            "8589957333",
            "8595978727",
            "8599999888",
            "8599999999",
            "8601015198",
            "8602300180",
            "8608637918",
            "8610133963",
            "8610186217",
            "8610407115",
            "8610510736",
            "8610774575",
            "8610874811",
            "8630366321",
            "8630606057",
            "8637426698",
            "8649354567",
            "8650900732",
            "8654564444",
            "8659333365",
            "8667561370",
            "8668742433",
            "8675664571",
            "8683803016",
            "8685798982",
            "8755185204",
            "8755222533",
            "8755344105",
            "8755508646",
            "8755668125",
            "8755670223",
            "8756886657",
            "8756965153",
            "8760525205",
            "8765453211",
            "8766787878",
            "8767476928",
            "8767677997",
            "8770046546",
            "8777566073",
            "8778150277",
            "8780007391",
            "8787979677",
            "8791871487",
            "8794646446",
            "8796412247",
            "8807695281",
            "8807698082",
            "8807984058",
            "8825457099",
            "8825740626",
            "8835555555",
            "8838593635",
            "8838884362",
            "8845724554",
            "8853627994",
            "8855555555",
            "8858458787",
            "8859280546",
            "8859865378",
            "8860274604",
            "8860302429",
            "8865938716",
            "8866663760",
            "8868012026",
            "8869659766",
            "8870134387",
            "8870918383",
            "8874733333",
            "8875030400",
            "8882416054",
            "8884533103",
            "8884638063",
            "8885978666",
            "8888445338",
            "8894032390",
            "8896117858",
            "8898797997",
            "8899177772",
            "8899817490",
            "8903478872",
            "8903757788",
            "8919637791",
            "8923084667",
            "8923128144",
            "8923675997",
            "8923733566",
            "8925456818",
            "8925470867",
            "8925475670",
            "8938888190",
            "8939381278",
            "8940533828",
            "8940808813",
            "8940822925",
            "8947588888",
            "8954491531",
            "8954575534",
            "8954593442",
            "8954899999",
            "8955022384",
            "8955666666",
            "8960698683",
            "8969233264",
            "8977485645",
            "8978575221",
            "8978575223",
            "8979024704",
            "8979711048",
            "8979877629",
            "8979992211",
            "8988888999",
            "8999187397",
            "8999928888",
            "9000000123",
            "9003162646",
            "9003597994",
            "9004603489",
            "9004756380",
            "9005144137",
            "9008636713",
            "9012631693",
            "9012953122",
            "9012972385",
            "9021464882",
            "9021709165",
            "9025138343",
            "9025526693",
            "9025549606",
            "9025771470",
            "9027247371",
            "9027904246",
            "9033145244",
            "9033210065",
            "9033302824",
            "9033446427",
            "9037561417",
            "9041369994",
            "9042401105",
            "9043472343",
            "9043805196",
            "9045167975",
            "9047740689",
            "9050445090",
            "9055570440",
            "9058236882",
            "9058280364",
            "9067278311",
            "9068142481",
            "9068154787",
            "9068809991",
            "9074846622",
            "9078631013",
            "9079390914",
            "9080878461",
            "9080973807",
            "9081569160",
            "9082066913",
            "9087660121",
            "9087959764",
            "9090213229",
            "9090275237",
            "9090313229",
            "9090407368",
            "9090709890",
            "9090974785",
            "9090975571",
            "9092096478",
            "9092248920",
            "9092434069",
            "9094819494",
            "9095052411",
            "9095254082",
            "9095697220",
            "9095888786",
            "9099219099",
            "9105500437",
            "9105945681",
            "9112944290",
            "9113838725",
            "9119753411",
            "9119754307",
            "9120558530",
            "9120632236",
            "9123983307",
            "9136178236",
            "9148540520",
            "9148540520",
            "9150803563",
            "9155595591",
            "9157333773",
            "9159307611",
            "9160470273",
            "9161946194",
            "9173515143",
            "9176694462",
            "9185278342",
            "9193107519",
            "9193931452",
            "9212453971",
            "9216112967",
            "9219511299",
            "9219668689",
            "9231534992",
            "9246358098",
            "9251151100",
            "9255589513",
            "9283469258",
            "9303336677",
            "9304412490",
            "9305437781",
            "9313274867",
            "9313327237",
            "9314664777",
            "9316421660",
            "9324054732",
            "9325807750",
            "9327087740",
            "9327144271",
            "9327420046",
            "9329796917",
            "9331851560",
            "9334488304",
            "9341949672",
            "9342071185",
            "9342551640",
            "9345467850",
            "9345580703",
            "9345715623",
            "9354313464",
            "9355540740",
            "9359741198",
            "9360170269",
            "9360513263",
            "9360818648",
            "9360859078",
            "9361440575",
            "9361444849",
            "9361480560",
            "9361601880",
            "9361778669",
            "9361976745",
            "9363041377",
            "9366666666",
            "9368076678",
            "9368106800",
            "9369555750",
            "9369938140",
            "9374241645",
            "9374711585",
            "9375298167",
            "9375719370",
            "9376763661",
            "9377025284",
            "9380428398",
            "9384222102",
            "9410065868",
            "9410997162",
            "9411123040",
            "9411165116",
            "9411350105",
            "9411856007",
            "9412561619",
            "9412970407",
            "9414161273",
            "9414192699",
            "9415611819",
            "9416758890",
            "9417975203",
            "9418499853",
            "9418682632",
            "9426275506",
            "9427145886",
            "9427724265",
            "9435135337",
            "9444180100",
            "9444252131",
            "9444739525",
            "9444850374",
            "9445103230",
            "9446677002",
            "9448113390",
            "9452564070",
            "9452705665",
            "9455643001",
            "9455678222",
            "9456116003",
            "9456322488",
            "9456734996",
            "9456774870",
            "9456792235",
            "9458253325",
            "9458389671",
            "9458390884",
            "9464108205",
            "9464403482",
            "9485871004",
            "9488418526",
            "9493558555",
            "9498073630",
            "9500065646",
            "9500150503",
            "9500480119",
            "9500618118",
            "9500676200",
            "9500689978",
            "9510889450",
            "9511868966",
            "9514488349",
            "9518331554",
            "9519409621",
            "9520246184",
            "9524704970",
            "9528036909",
            "9528774393",
            "9538936275",
            "9538962456",
            "9541256589",
            "9548239455",
            "9548326646",
            "9548770207",
            "9549691999",
            "9554898533",
            "9555361842",
            "9557147748",
            "9557556999",
            "9562434834",
            "9562439036",
            "9566224317",
            "9566566308",
            "9578607744",
            "9579775346",
            "9580691297",
            "9585901706",
            "9591674747",
            "9597013827",
            "9597070269",
            "9597772344",
            "9597993924",
            "9599336956",
            "9600251725",
            "9600312433",
            "9601272136",
            "9616168165",
            "9624789024",
            "9624789024",
            "9626957252",
            "9627358860",
            "9629377890",
            "9629664923",
            "9634081792",
            "9634249075",
            "9634276720",
            "9634299381",
            "9634578449",
            "9639534483",
            "9643626550",
            "9647383695",
            "9647494931",
            "9650065833",
            "9650533261",
            "9653383495",
            "9655603078",
            "9657672969",
            "9662024158",
            "9675570762",
            "9677222946",
            "9677865300",
            "9686790581",
            "9686790583",
            "9686790588",
            "9690012123",
            "9694220966",
            "9694932912",
            "9696666666",
            "9696959194",
            "9710929356",
            "9711240028",
            "9712851686",
            "9713391740",
            "9714712308",
            "9717783841",
            "9718443811",
            "9719178781",
            "9720695697",
            "9722922160",
            "9723459900",
            "9725339956",
            "9727540161",
            "9727720645",
            "9732767362",
            "9736026710",
            "9742290783",
            "9742616335",
            "9743114868",
            "9750037007",
            "9750264057",
            "9751368933",
            "9752244979",
            "9754919029",
            "9758651720",
            "9760021358",
            "9760343155",
            "9761277685",
            "9762304135",
            "9763794900",
            "9764618484",
            "9766938108",
            "9770099247",
            "9770339266",
            "9779403980",
            "9780364281",
            "9780548554",
            "9780997232",
            "9781864696",
            "9785421268",
            "9786083315",
            "9786281648",
            "9786779035",
            "9787512916",
            "9788575987",
            "9789575961",
            "9789671830",
            "9790204110",
            "9790610374",
            "9791056857",
            "9792771177",
            "9793001010",
            "9793350415",
            "9797646494",
            "9797979797",
            "9803352220",
            "9807979714",
            "9808921718",
            "9810029758",
            "9810090588",
            "9810166682",
            "9810315798",
            "9810372756",
            "9810726463",
            "9810761218",
            "9811155807",
            "9811900229",
            "9815255413",
            "9816915775",
            "9818399109",
            "9820146619",
            "9821536235",
            "9822519080",
            "9823045555",
            "9824011842",
            "9824036707",
            "9824202366",
            "9825000732",
            "9825067335",
            "9825656062",
            "9826287879",
            "9826421503",
            "9827264344",
            "9827389732",
            "9827402332",
            "9828263057",
            "9829287636",
            "9829382632",
            "9834290714",
            "9837125771",
            "9837560563",
            "9840866546",
            "9840869974",
            "9840978786",
            "9845125325",
            "9845632142",
            "9854124565",
            "9854125362",
            "9854125365",
            "9854125689",
            "9854521458",
            "9854547846",
            "9854651253",
            "9854652359",
            "9856412375",
            "9856453212",
            "9861098830",
            "9864267168",
            "9865412377",
            "9870406962",
            "9870694968",
            "9871666247",
            "9872004528",
            "9873408408",
            "9875465645",
            "9876543214",
            "9879025899",
            "9879509879",
            "9879885552",
            "9879955128",
            "9881454014",
            "9884316259",
            "9884553143",
            "9884822579",
            "9888219995",
            "9889069069",
            "9889972469",
            "9890186861",
            "9890831434",
            "9891272993",
            "9891414706",
            "9892569312",
            "9894259124",
            "9894333918",
            "9894546940",
            "9897121755",
            "9897272152",
            "9898493217",
            "9898731872",
            "9898888899",
            "9898959759",
            "9898971440",
            "9899708759",
            "9900156723",
            "9902343598",
            "9905557848",
            "9909912371",
            "9910965991",
            "9913606525",
            "9916453014",
            "9916453019",
            "9916542162",
            "9916542163",
            "9916672857",
            "9916825808",
            "9919499369",
            "9920476930",
            "9923345151",
            "9924245422",
            "9924451201",
            "9924677575",
            "9925229805",
            "9925247405",
            "9927116174",
            "9929930868",
            "9929984477",
            "9930994659",
            "9940091521",
            "9940414191",
            "9940459813",
            "9940616525",
            "9941470389",
            "9941480789",
            "9944203959",
            "9944437827",
            "9944724561",
            "9944780977",
            "9947565502",
            "9948846733",
            "9952311094",
            "9952603208",
            "9953334425",
            "9953373737",
            "9953503512",
            "9953882459",
            "9956687028",
            "9962018602",
            "9964409818",
            "9964961047",
            "9967245315",
            "9970777071",
            "9971355923",
            "9972093587",
            "9972689129",
            "9974694976",
            "9974823748",
            "9978468835",
            "9978642321",
            "9978673000",
            "9981419834",
            "9987111591",
            "9987112346",
            "9987401972",
            "9988776655",
            "9990340758",
            "9990356585",
            "9997859028",
            "9997979147",
            "9999899973",
            "9999999922",
            "9999999924",
            "9999999930",
        ]
        const emails = [
            "sriraman1807@gmail.com",
            "anupureddy1234@gmail.com",
            "rakshisowmya@gmail.com",
            "sriraman@gmail.com",
            "sowmyat.swam@gmail.com",
            "sriraman1807@gmail.com",
            "ashu@gmail.com",
            "darsh@co.io",
            "darshan@co.io"
        ]


        // const sellers = await getAllSellerData({ /* userId */ 'mobile.mobile': { $in: mob }, userId: { $ne: null } }, {limit:500})
        // // const sellers = await getAllSellerData({ email: { $in: emails }, userId: { $ne: null } }, {})
        // console.log("🚀 ~ seller lenth#######################", sellers && sellers.length, totel)
        // const sellerIds = []

        // if (sellers && sellers.length) {

        //     for (let index = 0; index < sellers.length; index++) {

        //         const _seller = sellers[index];
        //         const sellerId = _seller._id
        //         const mobile = _seller.mobile && _seller.mobile.length && _seller.mobile[0].mobile || null
        //         const email = _seller.email && _seller.email || null
        //         const userId = _seller.userId || null

        //         console.log("🚀 ~ file: testController.js ~ line 694 ~ module.exports.deleteTestDataRemaining ~ mobile", email, userId)

        //         if (mobile /* email */) {
        //             sellerIds.push(sellerId)
        //             const productids = _seller.sellerProductId
        //             console.log("-- Product ids ", productids)

        //             const m_dele = await bulkDeleteMasterProducts({ _id: { $in: productids } })
        //             console.log('-------- delete master---------')

        //             const p_dele = await deleteSellerProducts({ _id: { $in: productids } })
        //             console.log('-------- delete  Seller Products---------')

        //             const delMaster1 = await deleteSellerPlans({ sellerId: sellerId });
        //             console.log('-------- delete  Seller Plan---------')

        //             const _sellerDel = await deleteSellerRecord({ 'mobile.mobile': mobile.toString() /* email: email */ });
        //             console.log('-------- delete  Seller Data---------')

        //             const _buyer = await deleteBuyer({ mobile: mobile.toString() /* email: email */ })
        //             console.log('-------- delete  Buyer Data---------')

        //             // const investmentUrl = `http://localhost:8050/api/deleteInvesterDetails/${userId}`

        //             // // delete from investment
        //             // const respRes = await axios.post(investmentUrl, {
        //             //     headers: {
        //             //         'Content-Type': 'application/json',
        //             //         // 'authorization': `ekbazaar|${token}`,
        //             //     },
        //             //     data: {
        //             //         userId
        //             //     }
        //             // });
        //             // console.log(respRes.data, ' onvestor deleted @@@@@@@@@ -------------')
        //         }
        //         console.log(index, sellers && sellers.name, ' ---- index ')
        //     }
        // }
        console.log('--------------- delete all accounts ---------')
        respSuccess(res, sellers)

    } catch (error) {
        console.log(error, ' jjjjjjjjjjjjjjjjjjjjj')
        respError(res, error)
    }
})

module.exports.deleteTestDataChat = async (req, res) => new Promise(async (resolve, reject) => {

    try {
        console.log(' delete chat test account ---------------')
        const chatLog = await userChatLogin({ userId: "60023283293d9c7dacb6d705", username: admin.username, password: admin.password })

        console.log(chatLog, ' login ------------------')
        const mob = [
            "9377531777",
            "8654123789",
            "6546546546",
            "0000000000",
            "7633940634",
            "4666666666",
            "4547768676",
            "9785767654",
            "8870790799",
            "7876545747",
            "5656564444",
            "9877343242",
            "7676768769",
            "9743685882",
            "9691606259",
            "9797094927",
            "7796687567",
            "9099265054",
            "4498154915",
            "6000000001",
            "4687897984",
            "9476287982",
            "9817617378",
            "9761999916",
            "9997306309",
            "9864534547",
            "7895489457",
            "8998988909",
            "8946846546",
            "6547657568",
            "7643584376",
            "5465465745",
            "4576576586",
            "7249842876",
            "1122334455",
            "2398723028",
            "9845651007",
            "8277759312",
            "9876543213",
            "8277759315",
            "4565621231",
            "8277759314",
            "4564515410",
            "8312342131",
            "9442627648",
            "8723648723",
            "8652321321",
            "5645645064",
            "9533320452",
            "8091259337",
            "7852369411",
            "8765655454",
            "4564646546",
            "9999555555",
            "9345620764",
            "9905471208",
            "9665766747",
            "8989376376",
            "8776785876",
            "5555555555",
            "1122555446",
            "7898785876",
            "7847886005",
            "8888855555",
            "5443523423",
            "9889666534",
            "6756454556",
            "9500183467",
            "6567455665",
            "4676687877",
            "6564564757",
            "8888688886",
            "9686865157",
            "9738554506",
            "1654564564",
            "6873256757",
            "6754656533",
            "8610796380",
            "7897894545",
            "5456765756",
            "5675674567",
            "8885552226",
            "9686865157",
            "4768425475",
            "7675645353",
            "8277759300",
            "9883377223",
            "5478657467",
            "7657687857",
            "9035594482",
            "9486951440",
            "8765657465",
            "2635273571",
            "9686523659",
            "7879798797",
            "7975406493",
            "9533329087",
            "6309481972",
            "7887967856",
            "8798787956",
            "2323232323",
            "6786788769",
            "9576568976",
            "9488774951",
            "9443560254",
            "9842231522",
            "9442664707",
            "9159242224",
            "9443379589",
            "9442607366",
            "9442571455",
            "9843023233",
            "9586670953",
            "9786676801",
            "9750772900",
            "9747878200",
            "4232284250",
            "9442791199",
            "9787442424",
            "9840489996",
            "7667067374",
            "9442693095",
            "9442552707",
            "9442134134",
            "9486626516",
            "4262261255",
            "9486176134",
            "9486188877",
            "9443102212",
            "6325148697",
            "9443061322",
            "9442791212",
            "4266270936",
            "9446033986",
            "4232284139",
            "4266271457",
            "9442314444",
            "4232284892",
            "9443585448",
            "9442251218",
            "4262206294",
            "9487966113",
            "9842271190",
            "7698070987",
            "9442170881",
            "9442622810",
            "9443059299",
            "9442171439",
            "9943089680",
            "9842720840",
            "9894340458",
            "6699669966",
            "9487531481",
            "9988442314",
            "9442271456",
            "9843039467",
            "9842258627",
            "9442368750",
            "7358965563",
            "9486586546",
            "9159500880",
            "9443031373",
            "9443129785",
            "9447775502",
            "9843030563",
            "9443039491",
            "9486023744",
            "9446422874",
            "9486394641",
            "9443046111",
            "9495144492",
            "9443523261",
            "4232258706",
            "9443061444",
            "9443031246",
            "9486188709",
            "8903911355",
            "9486671117",
            "4232230419",
            "9744991213",
            "9443360517",
            "4266279877",
            "9443560501",
            "9442084006",
            "9447749994",
            "9568094740",
            "9443367452",
            "9843433056",
            "4232231190",
            "9443522141",
            "4262220055",
            "9445062055",
            "9884407077",
            "9486861266",
            "9442621860",
            "9443375713",
            "9626106660",
            "9443330739",
            "9487790964",
            "4232284114",
            "9500799999",
            "9843464188",
            "9443208225",
            "9443032046",
            "9443069088",
            "9443524140",
            "9751015556",
            "9443031275",
            "9344703439",
            "9159811522",
            "4266271829",
            "9443022259",
            "4266276656",
            "9442790877",
            "9566000226",
            "8988968757",
            "9523964558",
            "9565786586",
            "8465210485",
            "4852145125",
            "7845478521",
            "4521045623",
            "8745127845",
            "7870870970",
            "6578978798",
            "9880559139",
            "9328664900",
            "9686098203",
            "9443532768",
            "9286509902",
            "7676461486",
            "4452369887",
            "9876543211",
            "8678687689",
            "5678687785",
            "4745743674",
            "7644765746",
            "4222223942",
            "4746478678",
            "4253221026",
            "7483687486",
            "8784758748",
            "8487576646",
            "9869071684",
            "9163209070",
            "9902775740",
            "9805509269",
            "9163565901",
            "7582446398",
            "9978605440",
            "8160488534",
            "9825150569",
            "9913545584",
            "7096103926",
            "8460075253",
            "9979869331",
            "9967356190",
            "8000010700",
            "9913257501",
            "8652147896",
            "6452052055",
            "9568234455",
            "9825070953",
            "9586313776",
            "9686301001",
            "4735747375",
            "9428759570",
            "9924142857",
            "9898573760",
            "9664928132",
            "9427488861",
            "7738566768",
            "9825607618",
            "8000454577",
            "2353454345",
            "4454487878",
            "9483632704",
            "9198244851",
            "9328941044",
            "9252613331",
            "7347265867",
            "9725462444",
            "9377775560",
            "8048762026",
            "9640681047",
            "0804532726",
            "6767675654",
            "4455653453",
            "3254365457",
            "3454535353",
            "4565768768",
            "6000000456",
            "9825618280",
            "8870539776",
            "9980966929",
            "9008893627",
            "9008893627",
            "9008893627",
            "4575879789",
            "9375690002",
            "7546465364",
            "7527825885",
            "9900102701",
            "9743332477",
            "7567914441",
            "8277759313",
            "8437983740",
            "8919918505",
            "9379563852",
            "9033234406",
            "9391027776",
            "9924539883",
            "5623426758",
            "7984789444",
            "9824246488",
            "9898549306",
            "9945093890",
            "9033263061",
            "9898036799",
            "9925915870",
            "8147207720",
            "9539759370",
            "8105406822",
            "5675755675",
            "5345353543",
            "9916825719",
            "9916820705",
            "9916825803",
            "9916825804",
            "8754512415",
            "9916825805",
            "9916825806",
            "9916825807",
            "9874563214",
            "9426010352",
            "5455454548",
            "2758588338",
            "987654321",
            "8123928832",
            "4895745675",
            "9865432156",
            "9822968560",
            "9376945281",
            "9825222974",
            "9727764162",
            "9844214809",
            "1234567000",
            "4576654765",
            "6353490407",
            "7204644670",
            "8597687878",
            "5678975479",
            "9533320451",
            "9825017683",
            "5487686586",
            "9879457348",
            "9015654810",
            "9986116064",
            "9099943748",
            "7259842876",
            "9008988972",
            "9886253247",
            "9886253247",
            "1999999999",
            "9824111711",
            "9886263247",
            "9876263247",
            "9745632145",
            "9896263247",
            "9806526604",
            "8980134919",
            "9898021557",
            "7984364706",
            "9925390085",
            "9974046274",
            "7984964206",
            "9925010205",
            "9727617201",
            "8660759817",
            "9686301013",
            "8511964939",
            "9876541323",
            "9982475566",
            "9016876311",
            "9016876311",
            "9008988972",
            "9876543690",
            "9551009510",
            "9945618246",
            "9945612645",
            "8505492565",
            "9377750505",
            "9033465616",
            "2356895632",
            "9008312615",
            "9985488594",
            "8618790263",
            "8770041250",
            "8895544650",
            "9875641236",
            "9014571186",
            "8894554656",
            "5464646464",
            "8268736286",
            "9632587412",
            "9856565562",
            "9998973304",
            "8978575222",
            "9743277007",
            "7028913593",
            "9979727410",
            "9426074833",
            "9375555456",
            "9974697906",
            "9925211307",
            "9909652024",
            "9726230628",
            "8248148427",
            "9687744545",
            "9164449169",
            "9916542164",
            "9909146777",
            "8980181614",
            "8499998866",
            "8762834323",
            "7259842876",
            "9695944893",
            "9825372977",
            "9027332421",
            "6364510371",
            "8499998866",
            "7567832899",
            "8277759000",
            "9722975964",
            "9676263289",
            "9886253247",
            "9374711585",
            "5563856695",
            "8925456818",
            "9336628793",
            "9008988972",
            "9825817785"
        ]
        for (let index = 0; index < mob.length; index++) {
            const mobile = mob[index]
            const chatDetails = {
                mobile: mobile.toString() || '',
                token: chatLog.authToken,
                userId: chatLog.userId

            }
            const chatDelete = await deleteChatAccount(chatDetails)
            console.log(chatDelete, ' -------chat delete --------------')
        }
        console.log(' deleted all accounts --------')
        respSuccess(res, 'deleted all accounts')

    } catch (error) {
        console.log(error, ' errro ooooooo')
        respError(res, error)
    }

})


module.exports.uploadInternationalCity = async (req, res) => new Promise(async (resolve, reject) => {

    try {
        const data = req.body

        if (data && data.length) {

            for (let index = 0; index < data.length; index++) {
                const element = data[index];
                const country = await getCountryData({ serialNo: element.countryCode.toString() })
                console.log("🚀 country------ ", country && country.name)
                const name = element.city.toLowerCase()
                console.log(name, element, ' --------------')
                const cData = {
                    name,
                    state: null,
                    country: country && country._id,
                    iso2: element && element.iso2 || null,
                    iso3: element && element.iso3 || null,
                    alias: [name]
                }
                const city = await getCity({
                    name: {
                        $regex: name, $options: 'i'
                    }
                })
                console.log(city, ' ---------------')
                if (!city) {
                    const _city = await addCity(cData)
                } else {
                    console.log(name, ' ---- Exist city ----')
                }
                console.log(index, name, '--------------- Index')
            }

        }
        console.log('----- Uploade All Data Succesfully---------')
        respSuccess(res, 'uploaded---')

    } catch (error) {

        respError(res, error)

    }
})


module.exports.getCityList = async (req, res) => new Promise(async (resolve, reject) => {

    try {
        const list = []
        console.log(' city testing')
        let totalCount = 49742
        let limit = 200
        const ratio = totalCount / limit;
        let skip = 0;
        console.log(ratio, "ratio");
        // if (result) {
        for (skip; skip <= totalCount; skip += limit) {
            console.log(' ramesh ------------')
            const result = await getCityList({ skip, limit })

            for (let index = 0; index < result.length; index++) {
                const v = result[index];

                list.push({
                    city: v.name,
                    state: v.state && v.state.name || '',
                    country: v.country && v.country.name || ''
                })

            }
            console.log(skip, limit, ' --- total count')
        }
        // }
        const fileLocation = `public/uploads/cityListData`
        const err = await fs.writeFile(fileLocation, JSON.stringify(list))
        console.log("🚀 ~ file: testController.js ~ line 254 ~ module.exports.getCityList= ~ err", err)

        respSuccess(res, ' Exported successfully')

    } catch (error) {
        console.log(error, ' errrrr')

        respError(res, error)

    }
})


module.exports.gujaratSellerData = async (req, res) => new Promise(async (resolve, reject) => {

    try {

        console.log('gujarat seller date -----')
        // const data = await getAllSellerData({ "location.city": ObjectId("6058831286dcf826a46bf4ad") })
        // console.log("🚀 ~ file: testController.js ~ line 229 ~ module.exports.gujaratSellerData= ~ data", data)

        const registerdate = new Date(moment('2021-07-16').startOf('day')).toISOString()
        const date = new Date(moment().startOf('day')).toISOString()

        // const totalSellerCount = await SellerSchema.find({ $and: [/* { sellerProductId: { $exists: true } }, { "hearingSource.referralCode": { $exists: true } }, { $where: "this.sellerProductId.length > 0" }, */ { userId: { $ne: null } }], createdAt: { $gte: registerdate, $lt: date } }).populate('sellerProductId').select('name email mobile website sellerProductId hearingSource').exec()

        // const totalSellerCount = await SellerSchema.find({ name: { $regex: "rameshLive", $options: 'i' } }).populate('sellerProductId').select('name email mobile website sellerProductId createdAt').exec()
        const totalSellerCount = await getSeller('', '', { $and: [{ userId: { $ne: null } }/* , { name: { $regex: "rameshLive", $options: 'i' }} */], createdAt: { $gte: registerdate, $lt: date } })
        console.log("🚀 ~ file: testController.js ~ line 1769 ~ module.exports.gujaratSellerData= ~ totalSellerCount", totalSellerCount.length)


        let produts = []
        if (totalSellerCount && totalSellerCount.length) {
            for (let index = 0; index < totalSellerCount.length; index++) {
                let l1 = [], l1Id = [], l2 = [], l2Id = [], l3 = [], l3Id = [], l4 = [], l4Id = [], l5 = [], l5Id = [], pro_names = []
                const seller = totalSellerCount[index];

                console.log(seller.sellerProductId.length, 'aaaaaaaaaaaaaa')
                const details = seller.sellerProductId && seller.sellerProductId.length && seller.sellerProductId.map((pro) => {

                    pro.parentCategoryId && pro.parentCategoryId.length && l1.push(...pro.parentCategoryId.map((v) => v.name))
                    pro.parentCategoryId && pro.parentCategoryId.length && l1Id.push(...pro.parentCategoryId.map((v) => v.vendorId))

                    pro.primaryCategoryId && pro.primaryCategoryId.length && l2.push(...pro.primaryCategoryId.map((v) => v.name))
                    pro.primaryCategoryId && pro.primaryCategoryId.length && l2Id.push(...pro.primaryCategoryId.map((v) => v.vendorId))

                    pro.secondaryCategoryId && pro.secondaryCategoryId.length && l3.push(...pro.secondaryCategoryId.map((v) => v.name))
                    pro.secondaryCategoryId && pro.secondaryCategoryId.length && l3Id.push(...pro.secondaryCategoryId.map((v) => v.vendorId))

                    pro.poductId && pro.poductId.length && l4.push(...pro.poductId.map((v) => v.name))
                    pro.poductId && pro.poductId.length && l4Id.push(...pro.poductId.map((v) => v.vendorId))

                    pro.productSubcategoryId && pro.productSubcategoryId.length && l5.push(...pro.productSubcategoryId.map((v) => v.name))
                    pro.productSubcategoryId && pro.productSubcategoryId.length && l5Id.push(...pro.productSubcategoryId.map((v) => v.vendorId))

                    pro.productDetails && pro.productDetails.name && pro_names.push(pro.productDetails.name)


                }) || ''

                // console.log(l1, l1Id, l4, l4Id, ' ggggggggggggg')


                const qqq = {
                    name: seller.name,
                    email: seller.email,
                    hearingSource: seller.hearingSource && seller.hearingSource.source || '',
                    mobile: seller.mobile && seller.mobile.length && seller.mobile[0] && seller.mobile[0].mobile,
                    productCount: seller.sellerProductId && seller.sellerProductId.length || 0,

                    // sellerProducts: seller.sellerProductId && seller.sellerProductId.length && seller.sellerProductId.map((pro) => pro.productDetails && pro.productDetails.name || '').toString() || '',
                    sellerProductsName: _.uniq(pro_names).toString() || '',

                    level1: _.uniq(l1).toString(),
                    level1_ids: _.uniq(l1Id).toString(),

                    level2: _.uniq(l2).toString(),
                    level2_ids: _.uniq(l2Id).toString(),

                    level3: _.uniq(l3).toString(),
                    level3_ids: _.uniq(l3Id).toString(),

                    level4: _.uniq(l4).toString(),
                    level4_ids: _.uniq(l4Id).toString(),

                    level5: _.uniq(l5).toString(),
                    level5_ids: _.uniq(l5Id).toString(),

                    createdDate: seller.createdAt || '',
                }
                // console.log(JSON.stringify(qqq), ' ttttttttttttttt')
                produts.push(qqq)


            }
        }

        // const first = produts.slice(0, 1000);
        // const sec = produts.slice(1001, 2000);
        // const thr = produts.slice(2001, 3000);
        // const forth = produts.slice(3001, 4000);
        // const fifth = produts.slice(4000, 5397);
        // if (first) {
        //     // const fileLocation = `public/sellerDetailFiles/sellerProductListFirst.json`
        //     // const err = await fs.writeFile(fileLocation, JSON.stringify(first))
        //     // console.log(err, ' fffffffffffff')

        //     const FilePath = `sellerDetails-1-${new Date()}.csv`
        //     await this.csvFile(first, FilePath)
        //     console.log('11111')
        // }
        // if (sec) {
        //     // const fileLocation = `public/sellerDetailFiles/sellerProductListSecond.json`
        //     // const err = await fs.writeFile(fileLocation, JSON.stringify(sec))
        //     // console.log(err, ' ssssssssss')
        //     const FilePath = `sellerDetails-2-${new Date()}.csv`
        //     await this.csvFile(sec, FilePath)
        //     console.log('2222222')
        // }
        // if (thr) {
        //     // const fileLocation = `public/sellerDetailFiles/sellerProductListThird.json`
        //     // const err = await fs.writeFile(fileLocation, JSON.stringify(thr))
        //     // console.log(err, ' ssssssssss')
        //     const FilePath = `sellerDetails-3-${new Date()}.csv`
        //     await this.csvFile(thr, FilePath)
        //     console.log('333333333')
        // }
        // if (forth) {
        //     // const fileLocation = `public/sellerDetailFiles/sellerProductListFourth.json`
        //     // const err = await fs.writeFile(fileLocation, JSON.stringify(forth))
        //     // console.log(err, ' ssssssssss')
        //     const FilePath = `sellerDetails-4-${new Date()}.csv`
        //     await this.csvFile(forth, FilePath)
        //     console.log('4444444')
        // }
        // if (fifth) {
        //     // const fileLocation = `public/sellerDetailFiles/sellerProductListFive.json`
        //     // const err = await fs.writeFile(fileLocation, JSON.stringify(fifth))
        //     // console.log(err, ' ssssssssss')
        //     const FilePath = `sellerDetails-5-${new Date()}.csv`
        //     await this.csvFile(fifth, FilePath)
        //     console.log('5555555555')
        // }

        const FilePath = `sellerDetails-${new Date()}.csv`
        const FileSource = 'public/sellerDetailFiles/' + FilePath
        if (produts.length) {

            const csv = Papa.unparse(produts, {
                quotes: false, //or array of booleans
                quoteChar: '"',
                escapeChar: '"',
                delimiter: ",",
                header: true,
                newline: "\r\n",
                skipEmptyLines: false, //other option is 'greedy', meaning skip delimiters, quotes, and whitespace.
                columns: null, //or array of strings
            });
            fs.writeFile(path.resolve(__dirname, '../../../public/sellerDetailFiles', FilePath), csv, (err, data) => {
                console.log(err, "Completed data", data)
            })
        }

    } catch (error) {
        console.log(error, ' gggggggggggggg')
    }
})


module.exports.csvFile = async (produts, FilePath) => {

    try {


        const csv = Papa.unparse(produts, {
            quotes: false, //or array of booleans
            quoteChar: '"',
            escapeChar: '"',
            delimiter: ",",
            header: true,
            newline: "\r\n",
            skipEmptyLines: false, //other option is 'greedy', meaning skip delimiters, quotes, and whitespace.
            columns: null, //or array of strings
        });
        fs.writeFile(path.resolve(__dirname, '../../../public/sellerDetailFiles', FilePath), csv, (err, data) => {
            console.log(err, "Completed data", data)
        })
    } catch (error) {
        console.log(error, ' gggggggggggggg')
    }

}

module.exports.getSellersList = async (req, res) => new Promise(async (resolve, reject) => {

    try {

        console.log('all sellers list from 2021-07-16 to today')
        // const data = await getAllSellerData({ "location.city": ObjectId("6058831286dcf826a46bf4ad") })
        // console.log("🚀 ~ file: testController.js ~ line 229 ~ module.exports.gujaratSellerData= ~ data", data)

        const registerdate = new Date(moment('2021-07-16').startOf('day')).toISOString()
        const date = new Date(moment().startOf('day')).toISOString()

        // const totalSellerCount = await SellerSchema.find({ $and: [/* { sellerProductId: { $exists: true } }, { "hearingSource.referralCode": { $exists: true } }, { $where: "this.sellerProductId.length > 0" }, */ { userId: { $ne: null } }], createdAt: { $gte: registerdate, $lt: date } }).populate('sellerProductId').select('name email mobile website sellerProductId hearingSource').exec()

        // const totalSellerCount = await SellerSchema.find({ name: { $regex: "rameshLive", $options: 'i' } }).populate('sellerProductId').select('name email mobile website sellerProductId createdAt').exec()
        // const totalSellerCount = await getSeller('', '', { $and: [{ userId: { $ne: null } }/* , { name: { $regex: "rameshLive", $options: 'i' }} */], createdAt: { $gte: registerdate, $lt: date } })
        const totalSellerCount = await getSellersListData('', '', { $and: [{ userId: { $ne: null } }/* , { name: { $regex: "rameshLive", $options: 'i' }} */], createdAt: { $gte: registerdate, $lt: date } })

        console.log(totalSellerCount, "totalSeller Data");
        console.log("🚀 ~ file: testController.js ~ line 1769 ~ module.exports.gujaratSellerData= ~ totalSellerCount", totalSellerCount.length)

        let produts = []
        if (totalSellerCount && totalSellerCount.length) {
            for (let index = 0; index < totalSellerCount.length; index++) {
                let l1 = [], l1Id = [], l2 = [], l2Id = [], l3 = [], l3Id = [], l4 = [], l4Id = [], l5 = [], l5Id = [], pro_names = []
                const seller = totalSellerCount[index];

                console.log(seller.sellerProductId && seller.sellerProductId.length, 'aaaaaaaaaaaaaa')
                console.log(seller && seller.sellerType && seller.sellerType[0] && seller.sellerType[0].name, 'Seller Data');

                const details = seller.sellerProductId && seller.sellerProductId.length && seller.sellerProductId.map((pro) => {

                    pro.parentCategoryId && pro.parentCategoryId.length && l1.push(...pro.parentCategoryId.map((v) => v.name))
                    pro.parentCategoryId && pro.parentCategoryId.length && l1Id.push(...pro.parentCategoryId.map((v) => v.vendorId))

                    pro.primaryCategoryId && pro.primaryCategoryId.length && l2.push(...pro.primaryCategoryId.map((v) => v.name))
                    pro.primaryCategoryId && pro.primaryCategoryId.length && l2Id.push(...pro.primaryCategoryId.map((v) => v.vendorId))

                    pro.secondaryCategoryId && pro.secondaryCategoryId.length && l3.push(...pro.secondaryCategoryId.map((v) => v.name))
                    pro.secondaryCategoryId && pro.secondaryCategoryId.length && l3Id.push(...pro.secondaryCategoryId.map((v) => v.vendorId))

                    pro.poductId && pro.poductId.length && l4.push(...pro.poductId.map((v) => v.name))
                    pro.poductId && pro.poductId.length && l4Id.push(...pro.poductId.map((v) => v.vendorId))

                    pro.productSubcategoryId && pro.productSubcategoryId.length && l5.push(...pro.productSubcategoryId.map((v) => v.name))
                    pro.productSubcategoryId && pro.productSubcategoryId.length && l5Id.push(...pro.productSubcategoryId.map((v) => v.vendorId))

                    pro.productDetails && pro.productDetails.name && pro_names.push(pro.productDetails.name)


                }) || ''

                // console.log(l1, l1Id, l4, l4Id, ' ggggggggggggg')

                const qqq = {
                    name: seller.name,
                    email: seller.email,
                    hearingSource: seller.hearingSource && seller.hearingSource.source || '',
                    mobile: seller.mobile && seller.mobile.length && seller.mobile[0] && seller.mobile[0].mobile,
                    productCount: seller.sellerProductId && seller.sellerProductId.length || 0,
                    sellerType: seller && seller.sellerType && seller.sellerType[0] && seller.sellerType[0].name,

                    city: seller && seller.location && seller.location.city && seller.location.city.name,
                    state: seller && seller.location && seller.location.state && seller.location.state.name,
                    // sellerType: seller.sellerType && seller.sellerType[0] && seller.sellerType[0].name || '',

                    // sellerProducts: seller.sellerProductId && seller.sellerProductId.length && seller.sellerProductId.map((pro) => pro.productDetails && pro.productDetails.name || '').toString() || '',
                    sellerProductsName: _.uniq(pro_names).toString() || '',

                    level1: _.uniq(l1).toString(),
                    level1_ids: _.uniq(l1Id).toString(),

                    level2: _.uniq(l2).toString(),
                    level2_ids: _.uniq(l2Id).toString(),

                    level3: _.uniq(l3).toString(),
                    level3_ids: _.uniq(l3Id).toString(),

                    level4: _.uniq(l4).toString(),
                    level4_ids: _.uniq(l4Id).toString(),

                    level5: _.uniq(l5).toString(),
                    level5_ids: _.uniq(l5Id).toString(),

                    createdDate: seller.createdAt || '',
                }
                // console.log(JSON.stringify(qqq), ' ttttttttttttttt')
                produts.push(qqq)


            }
        }

        // const FilePath = `sellerDetails-${new Date()}.csv`
        const FilePath = `sellerDetails-list-${new Date()}.csv`
        const FileSource = 'public/sellerDetailFiles/' + FilePath

        console.log(produts.length, "produts.length");
        if (produts.length) {

            const csv = Papa.unparse(produts, {
                quotes: false, //or array of booleans
                quoteChar: '"',
                escapeChar: '"',
                delimiter: ",",
                header: true,
                newline: "\r\n",
                skipEmptyLines: false, //other option is 'greedy', meaning skip delimiters, quotes, and whitespace.
                columns: null, //or array of strings
            });
            fs.writeFile(path.resolve(__dirname, '../../../public/sellerDetailFiles', FilePath), csv, (err, data) => {
                console.log(err, "Completed data", data)
            })
        }

    } catch (error) {
        console.log(error, ' gggggggggggggg')
    }
  })
